<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="众划算网站接口测试" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="1.业务流程" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1509954651000</longProp>
        <longProp name="ThreadGroup.end_time">1509954651000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1.1 发布审核流程" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化环境" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="填写发布信息" enabled="true">
              <stringProp name="TestPlan.comments">===================注意===========================
1.发布活动的时候不能有缓存，即上一个活动发布不成功残留的图片等信息，容易导致发布失败
2.每个时间段的59分审核容易失败，过了59分再重新发布审核；已优化，不用管59分都可以审核
3.修改测试环境的配置文件：vim /usr/share/nginx/html/zhs_web/src/seller.shihuasuan.com/config/constants.php 找到发布活动间隔配置项，把5改成0,否则提示操作太快 </stringProp>
              <stringProp name="BeanShellSampler.query">//run_dev：1~4对应测试环境dev1到dev4；5：app；6：main。在哪个环境使用，修改后面的数字成相应的值
vars.put(&quot;run_dev&quot;,&quot;4&quot;);

//i：循环发布活动时，标题名称后面的数字，自增，用于区分活动标题
vars.put(&quot;i&quot;,&quot;2&quot;);

//loop_count：循环发布次数，1为只发一次活动
vars.put(&quot;loop_count&quot;,&quot;1&quot;);

//username：商家登录名
vars.put(&quot;username&quot;,&quot;安踏&quot;);

//pic1_name：发布活动上传的&quot;商品图片&quot;的文件名，包括后缀，1是第一张，图片需放在JMeter的bin路径下才能上传成功
//我的bin路径：D:\LMY\LMY\tool\apache-jmeter-3.3\bin，看个人存放路径做相应修改
vars.put(&quot;pic1_name&quot;,&quot;c2.jpg&quot;);

//pic1_source：上传&quot;商品图片&quot;的完整路径，1是第一张，注意要用两个斜杠(\\)表示层级
vars.put(&quot;pic1_source&quot;,&quot;C:\\Users\\Administrator\\Desktop\\pic\\c2.jpg&quot;);

vars.put(&quot;pic2_name&quot;,&quot;c1.jpg&quot;);
vars.put(&quot;pic2_source&quot;,&quot;C:\\Users\\Administrator\\Desktop\\pic\\c1.jpg&quot;);

vars.put(&quot;pic3_name&quot;,&quot;jiu.jpg&quot;);
vars.put(&quot;pic3_source&quot;,&quot;C:\\Users\\Administrator\\Desktop\\pic\\jiu.jpg&quot;);

//goods_section：活动版块，1：普通活动；2：一站成名；3：名品特卖
vars.put(&quot;goods_section&quot;,&quot;1&quot;);

//qrcode_pic_name：二维码上传图片的文件名
vars.put(&quot;qrcode_pic_name&quot;,&quot;tb1.png&quot;);
//qrcode_pic_url：二维码上传图片的路径
vars.put(&quot;qrcode_pic_source&quot;,&quot;C:\\Users\\Administrator\\Desktop\\pic\\tb1.png&quot;);

//pc_search：电脑搜索路径上传的图片路径
vars.put(&quot;pc_search_source&quot;,&quot;C:\\Users\\Administrator\\Desktop\\pic\\jiu.jpg&quot;);
//电脑搜索路径上传图片的文件名
vars.put(&quot;pc_search_name&quot;,&quot;jiu.jpg&quot;);

//mobile_search_img_source：手机搜索图片路径
vars.put(&quot;mobile_search_img_source&quot;,&quot;C:\\Users\\Administrator\\Desktop\\pic\\jiu.jpg&quot;);
//mobile_search_img_name：手机搜索图片的文件名
vars.put(&quot;mobile_search_img_name&quot;,&quot;jiu.jpg&quot;);

//qrcode_search_img_source：扫码搜索上传搜索结果图的路径
vars.put(&quot;qrcode_search_img_source&quot;,&quot;C:\\Users\\Administrator\\Desktop\\pic\\jiu.jpg&quot;);
//qrcode_search_img_name：扫码搜索搜索结果图的文件名
vars.put(&quot;qrcode_search_img_name&quot;,&quot;jiu.jpg&quot;);

//token_search_img_source：口令搜索上传搜索结果图的路径
vars.put(&quot;token_search_img_source&quot;,&quot;C:\\Users\\Administrator\\Desktop\\pic\\jiu.jpg&quot;);
//oken_search_img_name：口令搜索上传搜索结果图的文件名
vars.put(&quot;token_search_img_name&quot;,&quot;jiu.jpg&quot;);

/*
  下单类型，连续发布多个活动需要修改测试环境的配置文件：vim /usr/share/nginx/html/zhs_web/src/seller.shihuasuan.com/config/constants.php 找到发布活动间隔配置项，把5改成0,否则提示操作太快 
   1：直链下单；2：扫码下单；3：电脑搜索；4：口令下单；6：手机搜索；7：扫码搜索；8：口令搜索；
   0：每种类型发一次          
*/                
vars.put(&quot;order_way&quot;,&quot;1&quot;);

//商品来源，1：淘宝；2：天猫；5：京东；6：1号店；92：联盟特卖；4：其它
vars.put(&quot;goods_source&quot;,&quot;1&quot;);

/*商品分类，goods_pid为大类，1：潮流女装，2：精品安装，3：鞋子箱包，4：时尚配饰，5：美食特产，83：母婴用品，6：数码家电，7：家居日用，8：美容护肤，9：综合商品
 * goods_cid为子类，和大类对应关系如下：
 * 1(10，11，12，13，14，50，51，93，111，122)
 * 2(15，16，17，18，53，70，104，112，123)
 * 3(19，20，21，22，23，71，72，73，103，124，126)
 * 4(24，25，26，75，76，77，113，118)
 * 5(27，28，29，30，31，32，55，56，57，58，59，94，116)
 * 83(84，85，86，87，88，89，90，128)
 * 6(33，34，35，37，38，61，95，119，120，121)
 * 7(39，40，41，42，43，44，45，100，101，102，115，127)
 * 8(46，47，48，60，96，97，98，99，114)
 * 9(49，65，66，67，69，109，110，117)
*/
vars.put(&quot;goods_pid&quot;,&quot;1&quot;);
vars.put(&quot;goods_cid&quot;,&quot;10&quot;);

//商品份数
vars.put(&quot;goods_num&quot;,&quot;50&quot;);



</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="初始化环境" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;run_dev&quot;,bsh.args[0]);
public static TestEnv()
{
	if (Integer.parseInt(vars.get(&quot;run_dev&quot;))==1)	//Integer.parseInt(&quot;123&quot;)=Integer.parseInt(&quot;123&quot;,10)，默认十进制， 转换类型	
	{
		vars.put(&quot;web_url&quot;,&quot;zhsdev1&quot;);
		vars.put(&quot;pay_url&quot;,&quot;hulianpaydev1&quot;);				
	}else if(Integer.parseInt(vars.get(&quot;run_dev&quot;))==2)
	{
		vars.put(&quot;web_url&quot;,&quot;zhsdev2&quot;);
		vars.put(&quot;pay_url&quot;,&quot;hulianpaydev2&quot;);
	}else if(Integer.parseInt(vars.get(&quot;run_dev&quot;))==3)
	{
		vars.put(&quot;web_url&quot;,&quot;zhsdev3&quot;);
		vars.put(&quot;pay_url&quot;,&quot;hulianpaydev3&quot;);
	}else if(Integer.parseInt(vars.get(&quot;run_dev&quot;))==4)
	{
		vars.put(&quot;web_url&quot;,&quot;zhsdev4&quot;);
		vars.put(&quot;pay_url&quot;,&quot;hulianpaydev4&quot;);
	}else if(Integer.parseInt(vars.get(&quot;run_dev&quot;))==5)
	{
		vars.put(&quot;web_url&quot;,&quot;zhs&quot;);
		vars.put(&quot;pay_url&quot;,&quot;shikeehlpay&quot;);
	}else if(Integer.parseInt(vars.get(&quot;run_dev&quot;))==6)
	{
		vars.put(&quot;web_url&quot;,&quot;zhsmain&quot;);
		vars.put(&quot;pay_url&quot;,&quot;hulianpaymain&quot;);
	}
}
TestEnv();</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters">${run_dev}</stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="解决乱码问题" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器_发布审核" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${loop_count}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="计数器" enabled="true">
              <stringProp name="CounterConfig.start">${i}</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">title_No</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="发布审核活动" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="每个下单类型发一次" enabled="true">
                <stringProp name="IfController.condition">${order_way}==0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="设置goods_title" enabled="true"/>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化title来源" enabled="true"/>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="淘宝" enabled="true">
                      <stringProp name="IfController.condition">${goods_source}==1</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title淘宝来源和orde_url" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;0&quot;);
vars.put(&quot;url_order&quot;,&quot;https://item.taobao.com/item.htm?id=521751706808&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="天猫" enabled="true">
                      <stringProp name="IfController.condition">${goods_source}==2</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title天猫来源和orde_url" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;1&quot;);
vars.put(&quot;url_order&quot;,&quot;https://detail.tmall.com/item.htm?id=9349288136&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="京东" enabled="true">
                      <stringProp name="IfController.condition">${goods_source}==5</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title京东来源和orde_url" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;2&quot;);
vars.put(&quot;url_order&quot;,&quot;https://item.jd.com/11226763848.html&quot;);
</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1号店" enabled="true">
                      <stringProp name="IfController.condition">${goods_source}==6</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title1号店来源和orde_url" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;3&quot;);
vars.put(&quot;url_order&quot;,&quot;http://item.yhd.com/1082266.html&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="联盟特卖" enabled="false">
                      <stringProp name="IfController.condition">${goods_source}==92</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put{&quot;title_name&quot;,&quot;4&quot;};</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="其它" enabled="true">
                      <stringProp name="IfController.condition">${goods_source}==4</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title其它来源和orde_url" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;5&quot;);
vars.put(&quot;url_order&quot;,&quot;https://weidian.com/item.html?itemID=2236791760&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="设置title来源" enabled="true">
                    <stringProp name="TestPlan.comments">1：淘宝；2：天猫；5：京东；6：1号店；92：联盟特卖；4：其它；</stringProp>
                    <stringProp name="SwitchController.value">${title_name}</stringProp>
                  </SwitchController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源淘宝" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;淘宝&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源天猫" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;天猫&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源京东" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;京东&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源1号店" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;1号店&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源联盟特卖" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;联盟特卖&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源其它" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;其它&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化title版块" enabled="true">
                    <stringProp name="TestPlan.comments">普通活动；一站成名；名品馆；</stringProp>
                  </GenericController>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="普通活动" enabled="true">
                      <stringProp name="IfController.condition">${goods_section}==1</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title普通活动版块" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;title_section&quot;,&quot;0&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="一站成名" enabled="true">
                      <stringProp name="IfController.condition">${goods_section}==2</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title一站成名版块" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;title_section&quot;,&quot;1&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="名品馆" enabled="true">
                      <stringProp name="IfController.condition">${goods_section}==3</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title名品馆版块" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;title_section&quot;,&quot;2&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="设置title版块" enabled="true">
                    <stringProp name="SwitchController.value">${title_section}</stringProp>
                  </SwitchController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title普通活动" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;section_title&quot;,&quot;普通活动&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title一站成名" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;section_title&quot;,&quot;一站成名&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title名品馆" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;section_title&quot;,&quot;名品馆&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="循环发布" enabled="true">
                  <stringProp name="ForeachController.inputVal">order</stringProp>
                  <stringProp name="ForeachController.returnVal">order_way</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="order_1" elementType="Argument">
                        <stringProp name="Argument.name">order_1</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="order_2" elementType="Argument">
                        <stringProp name="Argument.name">order_2</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="order_3" elementType="Argument">
                        <stringProp name="Argument.name">order_3</stringProp>
                        <stringProp name="Argument.value">3</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="order_4" elementType="Argument">
                        <stringProp name="Argument.name">order_4</stringProp>
                        <stringProp name="Argument.value">4</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="order_5" elementType="Argument">
                        <stringProp name="Argument.name">order_5</stringProp>
                        <stringProp name="Argument.value">6</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="order_6" elementType="Argument">
                        <stringProp name="Argument.name">order_6</stringProp>
                        <stringProp name="Argument.value">7</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="order_7" elementType="Argument">
                        <stringProp name="Argument.name">order_7</stringProp>
                        <stringProp name="Argument.value">8</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="商家登录" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="errorMsg" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">errorMsg</stringProp>
                        </elementProp>
                        <elementProp name="account" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${username}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">account</stringProp>
                        </elementProp>
                        <elementProp name="token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">fadcb9cb424a678b16d51aecbb12dc2b</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">token</stringProp>
                        </elementProp>
                        <elementProp name="to" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">http%3A%2F%2Fwww.${web_url}.com%2F</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">to</stringProp>
                        </elementProp>
                        <elementProp name="password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">zhs123</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">password</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">login.${web_url}.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/tologin</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="点击发布活动菜单获取相关参数" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/goods/post</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取token_value" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">token_value</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&quot;_token_&quot; value=&quot;(.+?)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取zhs_value" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">zhs_value</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&apos;zhs&apos; : &apos;(.+?)&apos;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取kl_sketch_pid" enabled="true">
                      <stringProp name="TestPlan.comments">口令搜索路径</stringProp>
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">kl_sketch_pid</stringProp>
                      <stringProp name="RegexExtractor.regex">.*name=&quot;goods[kl_sketch_pid]&quot; value=&quot;(.+?)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取sm_sketch_pid" enabled="true">
                      <stringProp name="TestPlan.comments">口令搜索路径</stringProp>
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">sm_sketch_pid</stringProp>
                      <stringProp name="RegexExtractor.regex">.*name=&quot;goods[sm_sketch_pid&quot; value=&quot;(.+?)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传三张商品图片" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="第一张" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${pic1_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${pic1_source}</stringProp>
                            <stringProp name="File.paramname">img1</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${pic1_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload/1/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">pic1_url</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;default&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;},&quot;field&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="第二张" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${pic2_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${pic2_source}</stringProp>
                            <stringProp name="File.paramname">img2</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${pic2_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload/2/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">pic2_url</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;default&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;},&quot;field&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="第三张" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${pic3_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${pic3_source}</stringProp>
                            <stringProp name="File.paramname">img3</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${pic3_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload/3/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">pic3_url</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;default&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;},&quot;field&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">&quot;goods\/2017\/12\/31\/1602582209.jpg_180x180.jpg&quot;,</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化title下单类型" enabled="true"/>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="普通活动" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==1</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title直链下单" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;0&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="扫码下单" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==2</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title扫码下单" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;1&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="电脑搜索" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==3</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title电脑搜索" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;2&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="口令下单" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==4</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title口令下单" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;3&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="手机搜索" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==6</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title手机搜索" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;4&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="扫码搜索" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==7</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title扫码搜索" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;5&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="口令搜索" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==8</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title口令搜索" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;6&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="设置title下单类型" enabled="true">
                    <stringProp name="SwitchController.value">${way_order}</stringProp>
                  </SwitchController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title直链下单" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;直链下单&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title扫码下单" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;扫码下单&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title电脑搜索" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;电脑搜索&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title口令下单" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;口令下单&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title手机搜索" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;手机搜索&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title扫码搜索" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;扫码搜索&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title口令搜索" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;口令搜索&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="发布审核活动" enabled="true"/>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否扫码下单，上传二维码" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==2</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传二维码" enabled="true">
                        <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                          <collectionProp name="HTTPFileArgs.files">
                            <elementProp name="${qrcode_pic_source}" elementType="HTTPFileArg">
                              <stringProp name="File.path">${qrcode_pic_source}</stringProp>
                              <stringProp name="File.paramname">imgQrcode</stringProp>
                              <stringProp name="File.mimetype">application/octet-stream</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Filename" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">Filename</stringProp>
                              <stringProp name="Argument.value">${qrcode_pic_name}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="zhs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">zhs</stringProp>
                              <stringProp name="Argument.value">${zhs_value}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Upload" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Upload</stringProp>
                              <stringProp name="Argument.value">Submit Query</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                        <stringProp name="HTTPSampler.path">/pic/goods_qrcode_upload</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="DNT" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Shockwave Flash</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="72144370">&quot;error&quot;:0</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否电脑搜索，上传搜索路径" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==3</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传搜索路径" enabled="true">
                        <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                          <collectionProp name="HTTPFileArgs.files">
                            <elementProp name="${pc_search_source}" elementType="HTTPFileArg">
                              <stringProp name="File.path">${pc_search_source}</stringProp>
                              <stringProp name="File.paramname">search_img</stringProp>
                              <stringProp name="File.mimetype">application/octet-stream</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Filename" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Filename</stringProp>
                              <stringProp name="Argument.value">${pc_search_name}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="zhs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">zhs</stringProp>
                              <stringProp name="Argument.value">${zhs_value}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Upload" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Upload</stringProp>
                              <stringProp name="Argument.value">Submit Query</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/pic/upload_search_img/0</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">search_img</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;info&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;,&quot;field&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="72144370">&quot;error&quot;:0</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否手机搜索，上传搜索路径" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==6</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="44 /pic/upload_mobile_search_img/1/0" enabled="true">
                        <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                          <collectionProp name="HTTPFileArgs.files">
                            <elementProp name="${mobile_search_img_source}" elementType="HTTPFileArg">
                              <stringProp name="File.path">${mobile_search_img_source}</stringProp>
                              <stringProp name="File.paramname">mobile_search_img1</stringProp>
                              <stringProp name="File.mimetype">application/octet-stream</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Filename" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Filename</stringProp>
                              <stringProp name="Argument.value">${mobile_search_img_name}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="zhs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">zhs</stringProp>
                              <stringProp name="Argument.value">${zhs_value}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Upload" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Upload</stringProp>
                              <stringProp name="Argument.value">Submit Query</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="oway" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">6</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">oway</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/pic/upload_mobile_search_img/1/0</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">mobile_search_img_pid</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;pid&quot;:&quot;(.+?)&quot;},&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="72144370">&quot;error&quot;:0</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否扫码搜索，上传搜索路径和二维码" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==7</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="24 /pic/upload_qrcode_search_img/0?sketch=1" enabled="true"/>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="24 /pic/upload_qrcode_search_img/0?sketch=1" enabled="true">
                          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                            <collectionProp name="HTTPFileArgs.files">
                              <elementProp name="${qrcode_search_img_source}" elementType="HTTPFileArg">
                                <stringProp name="File.path">${qrcode_search_img_source}</stringProp>
                                <stringProp name="File.paramname">qrcode_search_img</stringProp>
                                <stringProp name="File.mimetype">application/octet-stream</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="Filename" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">Filename</stringProp>
                                <stringProp name="Argument.value">${qrcode_search_img_name}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="zhs" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">zhs</stringProp>
                                <stringProp name="Argument.value">${zhs_value}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="oway" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">oway</stringProp>
                                <stringProp name="Argument.value">7</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Upload" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">Upload</stringProp>
                                <stringProp name="Argument.value">Submit Query</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">/pic/upload_qrcode_search_img/0?sketch=1</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">qrcode_search</stringProp>
                            <stringProp name="RegexExtractor.regex">.*path&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;,&quot;pid&quot;:(.+?),&quot;url.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$$6$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">16</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="27 /pic/qrurl_to_qrimg/0" enabled="true"/>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="27 /pic/qrurl_to_qrimg/0" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="qrurl" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">qrurl</stringProp>
                                <stringProp name="Argument.value">http://e22a.com/h.DTMoqw</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="tb" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">tb</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="oway" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">oway</stringProp>
                                <stringProp name="Argument.value">7</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/pic/qrurl_to_qrimg/0</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">qrurl_to_qrimg</stringProp>
                            <stringProp name="RegexExtractor.regex">.*qrstate&quot;:true,&quot;path&quot;:&quot;{.+?}\\{.+?}\\{.+?}\\{.+?}\\{.+?}&quot;,&quot;pid&quot;:{.+?},&quot;url.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$$6$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="TestPlan.comments">qrstate&quot;:true,&quot;path&quot;:&quot;{.+?}\\{.+?}\\{.+?}\\{.+?}\\{.+?}&quot;,&quot;pid&quot;:{.+?},&quot;url.*</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否口令搜索，上传搜索路径和口令" enabled="true">
                      <stringProp name="IfController.condition">${order_way}==8</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="428 /pic/upload_token_search_img/0" enabled="true">
                        <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                          <collectionProp name="HTTPFileArgs.files">
                            <elementProp name="${token_search_img_source}" elementType="HTTPFileArg">
                              <stringProp name="File.path">${token_search_img_source}</stringProp>
                              <stringProp name="File.paramname">token_search_img</stringProp>
                              <stringProp name="File.mimetype">application/octet-stream</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Filename" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Filename</stringProp>
                              <stringProp name="Argument.value">${token_search_img_name}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="oway" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">oway</stringProp>
                              <stringProp name="Argument.value">8</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="zhs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">zhs</stringProp>
                              <stringProp name="Argument.value">${zhs_value}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Upload" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Upload</stringProp>
                              <stringProp name="Argument.value">Submit Query</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/pic/upload_token_search_img/0</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">token_search</stringProp>
                          <stringProp name="RegexExtractor.regex">.*path&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;,&quot;pid&quot;:(.+?),&quot;url.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$$6$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="TestPlan.comments">&quot;path&quot;:&quot;goodsinfo\/2018\/01\/08\/1058556743.jpg&quot;,&quot;pid&quot;:1469,&quot;</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="433 /goods/check_taotoken" enabled="true"/>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="434 /goods/check_taotoken" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="taotoken_str" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taotoken_str</stringProp>
                                <stringProp name="Argument.value">￥bNBD0LQ77eF￥</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/goods/check_taotoken</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">http://seller.zhs.com/goods/post</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="Origin" elementType="Header">
                                <stringProp name="Header.name">Origin</stringProp>
                                <stringProp name="Header.value">http://seller.zhs.com</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="430 /goods/check_taotoken" enabled="true"/>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="431 /goods/check_taotoken" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="taotoken_str" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taotoken_str</stringProp>
                                <stringProp name="Argument.value">￥bNBD0LQ77eF￥￥</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/goods/check_taotoken</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">http://seller.zhs.com/goods/post</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="Origin" elementType="Header">
                                <stringProp name="Header.name">Origin</stringProp>
                                <stringProp name="Header.value">http://seller.zhs.com</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发布信息" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="_token_" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">_token_</stringProp>
                            <stringProp name="Argument.value">${token_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[section]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[section]</stringProp>
                            <stringProp name="Argument.value">${goods_section}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[order_way]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[order_way]</stringProp>
                            <stringProp name="Argument.value">${order_way}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[source]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[source]</stringProp>
                            <stringProp name="Argument.value">${goods_source}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods_source" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods_source</stringProp>
                            <stringProp name="Argument.value">${goods_source}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[custom_source_name]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[custom_source_name]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[istaoke]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[istaoke]</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[order_url]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[order_url]</stringProp>
                            <stringProp name="Argument.value">${url_order}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[qr_post_way]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[qr_post_way]</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="qr_post_way" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">qr_post_way</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ordersPath[picCount]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">ordersPath[picCount]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="searchPath[${mobile_search_img_pid}][pid]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">searchPath[${mobile_search_img_pid}][pid]</stringProp>
                            <stringProp name="Argument.value">${mobile_search_img_pid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="searchPath[${mobile_search_img_pid}][keyword]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">searchPath[${mobile_search_img_pid}][keyword]</stringProp>
                            <stringProp name="Argument.value">111111</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="searchPath[${mobile_search_img_pid}][keyword_cap]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">searchPath[${mobile_search_img_pid}][keyword_cap]</stringProp>
                            <stringProp name="Argument.value">2222</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[taotoken]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[taotoken]</stringProp>
                            <stringProp name="Argument.value">￥bNBD0LQ77eF￥</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[title]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">goods[title]</stringProp>
                            <stringProp name="Argument.value">自动发布${section_title}${way_order}${goodsource_name}来源${title_No}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[keyword]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[keyword]</stringProp>
                            <stringProp name="Argument.value">我是关键词</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[shop_name]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[shop_name]</stringProp>
                            <stringProp name="Argument.value">111111</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[wangwang]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[wangwang]</stringProp>
                            <stringProp name="Argument.value">232123</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[shop_name_mobile_sear]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[shop_name_mobile_sear]</stringProp>
                            <stringProp name="Argument.value">111111</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[pid]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[pid]</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[cid]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[cid]</stringProp>
                            <stringProp name="Argument.value">10</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[imgCount]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[imgCount]</stringProp>
                            <stringProp name="Argument.value">3</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[imgs][1]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[imgs][1]</stringProp>
                            <stringProp name="Argument.value">${pic1_url_g1}${pic1_url_g2}${pic1_url_g3}${pic1_url_g4}${pic1_url_g5}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[imgs][2]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[imgs][2]</stringProp>
                            <stringProp name="Argument.value">${pic2_url_g1}${pic2_url_g2}${pic2_url_g3}${pic2_url_g4}${pic2_url_g5}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[imgs][3]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[imgs][3]</stringProp>
                            <stringProp name="Argument.value">${pic3_url_g1}${pic3_url_g2}${pic3_url_g3}${pic3_url_g4}${pic3_url_g5}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[price]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[price]</stringProp>
                            <stringProp name="Argument.value">11</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[discount]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[discount]</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[mobile_price]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[mobile_price]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[num]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[num]</stringProp>
                            <stringProp name="Argument.value">${goods_num}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[days]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[days]</stringProp>
                            <stringProp name="Argument.value">11</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[buy_limit]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[buy_limit]</stringProp>
                            <stringProp name="Argument.value">3</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[is_verify]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[is_verify]</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[prompts][2]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[prompts][2]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[prompts][6]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[prompts][6]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[prompts][9]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[prompts][9]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[prompts][4]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[prompts][4]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[instruction]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[instruction]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[message]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">goods[message]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="postSubmit" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">postSubmit</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="submitActivity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">submitActivity</stringProp>
                            <stringProp name="Argument.value">发布商品</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="goods[scan_qr_way]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">goods[scan_qr_way]</stringProp>
                          </elementProp>
                          <elementProp name="scan_qr_way" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">scan_qr_way</stringProp>
                          </elementProp>
                          <elementProp name="goods[sm_sketch_pid]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${qrcode_search_g6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">goods[sm_sketch_pid]</stringProp>
                          </elementProp>
                          <elementProp name="goods[price_type]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">goods[price_type]</stringProp>
                          </elementProp>
                          <elementProp name="pid[]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${qrcode_search_g6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">pid[]</stringProp>
                          </elementProp>
                          <elementProp name="goods[qrcode_searchway][${qrurl_to_qrimg_g6}]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">goods[qrcode_searchway][${qrurl_to_qrimg_g6}]</stringProp>
                          </elementProp>
                          <elementProp name="ordersPath[imgs]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${token_search_g1}${token_search_g2}${token_search_g3}${token_search_g4}${token_search_g5}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ordersPath[imgs]</stringProp>
                          </elementProp>
                          <elementProp name="goods[kl_sketch_pid]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${token_search_g6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">goods[kl_sketch_pid]</stringProp>
                          </elementProp>
                          <elementProp name="goods[tokens][]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">￥bNBD0LQ77eF￥ </stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">goods[tokens][]</stringProp>
                          </elementProp>
                          <elementProp name="goods[token_searchway][]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">11111111</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">goods[token_searchway][]</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                      <stringProp name="HTTPSampler.path">/goods/post</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">new_gid</stringProp>
                        <stringProp name="RegexExtractor.regex">.*pay/detail/(.+?)/.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="支付" enabled="true"/>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="请求付款页" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/pay/detail/${new_gid}/0-1</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_uid" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">uid</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;uid&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_guaranteetitle" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">guaranteetitle</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;guaranteetitle&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_servicetitle" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">servicetitle</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;servicetitle&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_discounttitle" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">discounttitle</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;discounttitle&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_guaranteeOrder" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">guaranteeOrder</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;guaranteeOrder&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_serviceOrder" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">serviceOrder</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;serviceOrder&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_discountOrder" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">discountOrder</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;discountOrder&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_guaranteeMoney" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">guaranteeMoney</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;guaranteeMoney&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_serviceMoney" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">serviceMoney</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;serviceMoney&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_discountMoney" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">discountMoney</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;discountMoney&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_key" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">key</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;key&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_backurl" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">backurl</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;backurl&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_notifyurl" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">notifyurl</stringProp>
                          <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;notifyurl&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="校验登录状态" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="site" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">site</stringProp>
                              <stringProp name="Argument.value">3</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="uid" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">uid</stringProp>
                              <stringProp name="Argument.value">${uid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="type" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">type</stringProp>
                              <stringProp name="Argument.value">6</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="gid" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">gid</stringProp>
                              <stringProp name="Argument.value">${new_gid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="guaranteetitle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">guaranteetitle</stringProp>
                              <stringProp name="Argument.value">${guaranteetitle}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="servicetitle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">servicetitle</stringProp>
                              <stringProp name="Argument.value">${servicetitle}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="discounttitle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">discounttitle</stringProp>
                              <stringProp name="Argument.value">${discounttitle}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="guaranteeOrder" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">guaranteeOrder</stringProp>
                              <stringProp name="Argument.value">${guaranteeOrder}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="serviceOrder" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">serviceOrder</stringProp>
                              <stringProp name="Argument.value">${serviceOrder}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="discountOrder" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">discountOrder</stringProp>
                              <stringProp name="Argument.value">${discountOrder}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="guaranteeMoney" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">guaranteeMoney</stringProp>
                              <stringProp name="Argument.value">${guaranteeMoney}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="serviceMoney" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">serviceMoney</stringProp>
                              <stringProp name="Argument.value">${serviceMoney}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="discountMoney" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">discountMoney</stringProp>
                              <stringProp name="Argument.value">${discountMoney}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="key" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">key</stringProp>
                              <stringProp name="Argument.value">${key}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="backurl" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">backurl</stringProp>
                              <stringProp name="Argument.value">${backurl}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="notifyurl" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">notifyurl</stringProp>
                              <stringProp name="Argument.value">${notifyurl}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="temp1" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">temp1</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="temp2" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">temp2</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="temp3" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">temp3</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">www.${pay_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/trade/checklogin</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_sign" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">sign</stringProp>
                          <stringProp name="RegexExtractor.regex">.*name=&quot;sign&quot; value=&quot;(.+?)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_post_data" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">post_data</stringProp>
                          <stringProp name="RegexExtractor.regex">.*name=&quot;postdata&quot; value=&quot;(.+?)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="确认支付" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="password" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">password</stringProp>
                              <stringProp name="Argument.value">zhs321</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="action" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">action</stringProp>
                              <stringProp name="Argument.value">1</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="type" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">type</stringProp>
                              <stringProp name="Argument.value">1</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="sign" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">sign</stringProp>
                              <stringProp name="Argument.value">${sign}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">www.${pay_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                        <stringProp name="HTTPSampler.path">/trade/CheckPassword</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_pay_sign" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">pay_sign</stringProp>
                          <stringProp name="RegexExtractor.regex">.*val\(\&apos;(.+?)\&apos;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="支付结果" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="site" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">site</stringProp>
                              <stringProp name="Argument.value">3</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="uid" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">uid</stringProp>
                              <stringProp name="Argument.value">${uid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="type" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">type</stringProp>
                              <stringProp name="Argument.value">6</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="gid" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">gid</stringProp>
                              <stringProp name="Argument.value">${new_gid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="guaranteetitle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">guaranteetitle</stringProp>
                              <stringProp name="Argument.value">${guaranteetitle}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="servicetitle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">servicetitle</stringProp>
                              <stringProp name="Argument.value">${servicetitle}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="discounttitle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">discounttitle</stringProp>
                              <stringProp name="Argument.value">${discounttitle}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="guaranteeOrder" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">guaranteeOrder</stringProp>
                              <stringProp name="Argument.value">${guaranteeOrder}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="serviceOrder" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">serviceOrder</stringProp>
                              <stringProp name="Argument.value">${serviceOrder}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="discountOrder" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">discountOrder</stringProp>
                              <stringProp name="Argument.value">${discountOrder}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="guaranteeMoney" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">guaranteeMoney</stringProp>
                              <stringProp name="Argument.value">${guaranteeMoney}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="serviceMoney" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">serviceMoney</stringProp>
                              <stringProp name="Argument.value">${serviceMoney}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="discountMoney" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">discountMoney</stringProp>
                              <stringProp name="Argument.value">${discountMoney}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="key" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">key</stringProp>
                              <stringProp name="Argument.value">${key}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="backurl" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">backurl</stringProp>
                              <stringProp name="Argument.value">${backurl}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="notifyurl" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">notifyurl</stringProp>
                              <stringProp name="Argument.value">${notifyurl}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="temp1" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">temp1</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="temp2" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">temp2</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="temp3" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">temp3</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="paysign" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">paysign</stringProp>
                              <stringProp name="Argument.value">${pay_sign}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">www.${pay_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/trade/PayResult</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://www.shikeehlpay.com/trade/paymentGoods</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">zh-CN</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                            </elementProp>
                            <elementProp name="DNT" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html, application/xhtml+xml, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="管理员审核活动" enabled="true"/>
                    <hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="管理员登陆" enabled="true"/>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="管理员登录" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="errorMsg" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.name">errorMsg</stringProp>
                              </elementProp>
                              <elementProp name="account" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">管理员</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.name">account</stringProp>
                              </elementProp>
                              <elementProp name="token" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">${token_value}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.name">token</stringProp>
                              </elementProp>
                              <elementProp name="to" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">http%3A%2F%2Fwww.${web_url}.com%2F</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.name">to</stringProp>
                              </elementProp>
                              <elementProp name="password" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">zhs123</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.name">password</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">login.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">/tologin</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录成功" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="to" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">to</stringProp>
                                <stringProp name="Argument.value">http%3A%2F%2Fadmin.${web_url}.com%2F</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">login.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">/success</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_admin_sign" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">admin_sign</stringProp>
                            <stringProp name="RegexExtractor.regex">.*1&amp;sign=(.+?)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="审核通过" enabled="true"/>
                      <hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="等于58分" enabled="true">
                          <stringProp name="IfController.condition">${__time(mm,)}==58</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新活动审核通过" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="startTime" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">startTime</stringProp>
                                  <stringProp name="Argument.value">2017-11-16 18:36:54</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="endTimetype" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">endTimetype</stringProp>
                                  <stringProp name="Argument.value">0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="endTime" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">endTime</stringProp>
                                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)} ${__time(${__intSum(${__time(HH,)},+1,)}:,)}${__intSum(${__time(mm,)},+2,)}${__time(:ss,)}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="dosave" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">dosave</stringProp>
                                  <stringProp name="Argument.value">yes</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="pass" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">pass</stringProp>
                                  <stringProp name="Argument.value">1</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="gid" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">gid</stringProp>
                                  <stringProp name="Argument.value">${new_gid}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">admin.${web_url}.com</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">http</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                            <stringProp name="HTTPSampler.path">/goods/check</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="789079806">操作成功</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="等于59分" enabled="true">
                          <stringProp name="IfController.condition">${__time(mm,)}==59</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新活动审核通过" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="startTime" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">startTime</stringProp>
                                  <stringProp name="Argument.value">2017-11-16 18:36:54</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="endTimetype" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">endTimetype</stringProp>
                                  <stringProp name="Argument.value">0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="endTime" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">endTime</stringProp>
                                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)} ${__time(${__intSum(${__time(HH,)},+1,)}:,)}${__intSum(${__time(mm,)},+1,)}${__time(:ss,)}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="dosave" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">dosave</stringProp>
                                  <stringProp name="Argument.value">yes</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="pass" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">pass</stringProp>
                                  <stringProp name="Argument.value">1</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="gid" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">gid</stringProp>
                                  <stringProp name="Argument.value">${new_gid}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">admin.${web_url}.com</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">http</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                            <stringProp name="HTTPSampler.path">/goods/check</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="789079806">操作成功</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="不等于58和59" enabled="true">
                          <stringProp name="IfController.condition">${__time(mm,)}!=59 &amp;&amp; ${__time(mm,)}!=58</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新活动审核通过" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="startTime" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">startTime</stringProp>
                                  <stringProp name="Argument.value">2017-11-16 18:36:54</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="endTimetype" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">endTimetype</stringProp>
                                  <stringProp name="Argument.value">0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="endTime" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">endTime</stringProp>
                                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)} ${__time(HH:,)}${__intSum(${__time(mm,)},+2,)}${__time(:ss,)}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="dosave" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">dosave</stringProp>
                                  <stringProp name="Argument.value">yes</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="pass" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">pass</stringProp>
                                  <stringProp name="Argument.value">1</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="gid" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.name">gid</stringProp>
                                  <stringProp name="Argument.value">${new_gid}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">admin.${web_url}.com</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">http</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                            <stringProp name="HTTPSampler.path">/goods/check</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="789079806">操作成功</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="重置order_way" enabled="true">
                  <stringProp name="BeanShellSampler.query">vars.put(&quot;order_way&quot;,&quot;0&quot;);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="发一次活动" enabled="true">
                <stringProp name="IfController.condition">${order_way}!=0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="商家登录" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="errorMsg" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">errorMsg</stringProp>
                      </elementProp>
                      <elementProp name="account" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${username}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">account</stringProp>
                      </elementProp>
                      <elementProp name="token" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">fadcb9cb424a678b16d51aecbb12dc2b</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">token</stringProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">http%3A%2F%2Fwww.${web_url}.com%2F</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                      </elementProp>
                      <elementProp name="password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">zhs123</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">login.${web_url}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/tologin</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="发布活动" enabled="true"/>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="设置goods_title" enabled="true"/>
                  <hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化title来源" enabled="true"/>
                    <hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="淘宝" enabled="true">
                        <stringProp name="IfController.condition">${goods_source}==1</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title淘宝来源和orde_url" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;0&quot;);
vars.put(&quot;url_order&quot;,&quot;https://item.taobao.com/item.htm?id=521751706808&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="天猫" enabled="true">
                        <stringProp name="IfController.condition">${goods_source}==2</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title天猫来源和orde_url" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;1&quot;);
vars.put(&quot;url_order&quot;,&quot;https://detail.tmall.com/item.htm?id=9349288136&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="京东" enabled="true">
                        <stringProp name="IfController.condition">${goods_source}==5</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title京东来源和orde_url" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;2&quot;);
vars.put(&quot;url_order&quot;,&quot;https://item.jd.com/11226763848.html&quot;);
</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1号店" enabled="true">
                        <stringProp name="IfController.condition">${goods_source}==6</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title1号店来源和orde_url" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;3&quot;);
vars.put(&quot;url_order&quot;,&quot;http://item.yhd.com/1082266.html&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="联盟特卖" enabled="false">
                        <stringProp name="IfController.condition">${goods_source}==92</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put{&quot;title_name&quot;,&quot;4&quot;};</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="其它" enabled="true">
                        <stringProp name="IfController.condition">${goods_source}==4</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title其它来源和orde_url" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;title_name&quot;,&quot;5&quot;);
vars.put(&quot;url_order&quot;,&quot;https://weidian.com/item.html?itemID=2236791760&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="设置title来源" enabled="true">
                      <stringProp name="TestPlan.comments">1：淘宝；2：天猫；5：京东；6：1号店；92：联盟特卖；4：其它；</stringProp>
                      <stringProp name="SwitchController.value">${title_name}</stringProp>
                    </SwitchController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源淘宝" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;淘宝&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源天猫" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;天猫&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源京东" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;京东&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源1号店" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;1号店&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源联盟特卖" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;联盟特卖&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title来源其它" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;goodsource_name&quot;,&quot;其它&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化title版块" enabled="true">
                      <stringProp name="TestPlan.comments">普通活动；一站成名；名品馆；</stringProp>
                    </GenericController>
                    <hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="普通活动" enabled="true">
                        <stringProp name="IfController.condition">${goods_section}==1</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title普通活动版块" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;title_section&quot;,&quot;0&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="一站成名" enabled="true">
                        <stringProp name="IfController.condition">${goods_section}==2</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title一站成名版块" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;title_section&quot;,&quot;1&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="名品馆" enabled="true">
                        <stringProp name="IfController.condition">${goods_section}==3</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title名品馆版块" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;title_section&quot;,&quot;2&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="设置title版块" enabled="true">
                      <stringProp name="SwitchController.value">${title_section}</stringProp>
                    </SwitchController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title普通活动" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;section_title&quot;,&quot;普通活动&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title一站成名" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;section_title&quot;,&quot;一站成名&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title名品馆" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;section_title&quot;,&quot;名品馆&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始化title下单类型" enabled="true"/>
                    <hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="普通活动" enabled="true">
                        <stringProp name="IfController.condition">${order_way}==1</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title直链下单" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;0&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="扫码下单" enabled="true">
                        <stringProp name="IfController.condition">${order_way}==2</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title扫码下单" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;1&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="电脑搜索" enabled="true">
                        <stringProp name="IfController.condition">${order_way}==3</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title电脑搜索" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;2&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="口令下单" enabled="true">
                        <stringProp name="IfController.condition">${order_way}==4</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title口令下单" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;3&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="手机搜索" enabled="true">
                        <stringProp name="IfController.condition">${order_way}==6</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title手机搜索" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;4&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="扫码搜索" enabled="true">
                        <stringProp name="IfController.condition">${order_way}==7</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title扫码搜索" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;5&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="口令搜索" enabled="true">
                        <stringProp name="IfController.condition">${order_way}==8</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置title口令搜索" enabled="true">
                          <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;6&quot;);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="设置title下单类型" enabled="true">
                      <stringProp name="SwitchController.value">${way_order}</stringProp>
                    </SwitchController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title直链下单" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;直链下单&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title扫码下单" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;扫码下单&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title电脑搜索" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;电脑搜索&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title口令下单" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;口令下单&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title手机搜索" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;手机搜索&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title扫码搜索" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;扫码搜索&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="goods_title口令搜索" enabled="true">
                        <stringProp name="BeanShellSampler.query">vars.put(&quot;way_order&quot;,&quot;口令搜索&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="点击发布活动菜单" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/goods/post</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取token_value" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">token_value</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&quot;_token_&quot; value=&quot;(.+?)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取zhs_value" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">zhs_value</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&apos;zhs&apos; : &apos;(.+?)&apos;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取kl_sketch_pid" enabled="true">
                      <stringProp name="TestPlan.comments">口令搜索路径</stringProp>
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">kl_sketch_pid</stringProp>
                      <stringProp name="RegexExtractor.regex">.*name=&quot;goods[kl_sketch_pid]&quot; value=&quot;(.+?)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取sm_sketch_pid" enabled="true">
                      <stringProp name="TestPlan.comments">口令搜索路径</stringProp>
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">sm_sketch_pid</stringProp>
                      <stringProp name="RegexExtractor.regex">.*name=&quot;goods[sm_sketch_pid&quot; value=&quot;(.+?)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传三张商品图片" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="第一张" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${pic1_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${pic1_source}</stringProp>
                            <stringProp name="File.paramname">img1</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${pic1_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload/1/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">pic1_url</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;default&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;},&quot;field&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="第二张" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${pic2_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${pic2_source}</stringProp>
                            <stringProp name="File.paramname">img2</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${pic2_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload/2/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">pic2_url</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;default&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;},&quot;field&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="第三张" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${pic3_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${pic3_source}</stringProp>
                            <stringProp name="File.paramname">img3</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${pic3_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload/3/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">pic3_url</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;default&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;},&quot;field&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">&quot;goods\/2017\/12\/31\/1602582209.jpg_180x180.jpg&quot;,</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否扫码下单，上传二维码" enabled="true">
                    <stringProp name="IfController.condition">${order_way}==2</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传二维码" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${qrcode_pic_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${qrcode_pic_source}</stringProp>
                            <stringProp name="File.paramname">imgQrcode</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${qrcode_pic_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                      <stringProp name="HTTPSampler.path">/pic/goods_qrcode_upload</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="DNT" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Shockwave Flash</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="72144370">&quot;error&quot;:0</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否电脑搜索，上传搜索路径" enabled="true">
                    <stringProp name="IfController.condition">${order_way}==3</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传搜索路径" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${pc_search_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${pc_search_source}</stringProp>
                            <stringProp name="File.paramname">search_img</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${pc_search_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload_search_img/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">search_img</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;info&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;,&quot;field&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number"></stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="72144370">&quot;error&quot;:0</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否手机搜索，上传搜索路径" enabled="true">
                    <stringProp name="IfController.condition">${order_way}==6</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="44 /pic/upload_mobile_search_img/1/0" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${mobile_search_img_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${mobile_search_img_source}</stringProp>
                            <stringProp name="File.paramname">mobile_search_img1</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${mobile_search_img_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="oway" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">6</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">oway</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload_mobile_search_img/1/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">mobile_search_img_pid</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;pid&quot;:&quot;(.+?)&quot;},&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="72144370">&quot;error&quot;:0</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否扫码搜索，上传搜索路径和二维码" enabled="true">
                    <stringProp name="IfController.condition">${order_way}==7</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="24 /pic/upload_qrcode_search_img/0?sketch=1" enabled="true"/>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="24 /pic/upload_qrcode_search_img/0?sketch=1" enabled="true">
                        <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                          <collectionProp name="HTTPFileArgs.files">
                            <elementProp name="${qrcode_search_img_source}" elementType="HTTPFileArg">
                              <stringProp name="File.path">${qrcode_search_img_source}</stringProp>
                              <stringProp name="File.paramname">qrcode_search_img</stringProp>
                              <stringProp name="File.mimetype">application/octet-stream</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Filename" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Filename</stringProp>
                              <stringProp name="Argument.value">${qrcode_search_img_name}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="zhs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">zhs</stringProp>
                              <stringProp name="Argument.value">${zhs_value}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="oway" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">oway</stringProp>
                              <stringProp name="Argument.value">7</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Upload" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Upload</stringProp>
                              <stringProp name="Argument.value">Submit Query</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/pic/upload_qrcode_search_img/0?sketch=1</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">qrcode_search</stringProp>
                          <stringProp name="RegexExtractor.regex">.*path&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;,&quot;pid&quot;:(.+?),&quot;url.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$$6$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="27 /pic/qrurl_to_qrimg/0" enabled="true"/>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="27 /pic/qrurl_to_qrimg/0" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="qrurl" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">qrurl</stringProp>
                              <stringProp name="Argument.value">http://e22a.com/h.DTMoqw</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="tb" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">tb</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="oway" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">oway</stringProp>
                              <stringProp name="Argument.value">7</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/pic/qrurl_to_qrimg/0</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">qrurl_to_qrimg</stringProp>
                          <stringProp name="RegexExtractor.regex">.*qrstate&quot;:true,&quot;path&quot;:&quot;{.+?}\\{.+?}\\{.+?}\\{.+?}\\{.+?}&quot;,&quot;pid&quot;:{.+?},&quot;url.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$$6$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="TestPlan.comments">qrstate&quot;:true,&quot;path&quot;:&quot;{.+?}\\{.+?}\\{.+?}\\{.+?}\\{.+?}&quot;,&quot;pid&quot;:{.+?},&quot;url.*</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否口令搜索，上传搜索路径和口令" enabled="true">
                    <stringProp name="IfController.condition">${order_way}==8</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="428 /pic/upload_token_search_img/0" enabled="true">
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${token_search_img_source}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${token_search_img_source}</stringProp>
                            <stringProp name="File.paramname">token_search_img</stringProp>
                            <stringProp name="File.mimetype">application/octet-stream</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Filename" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Filename</stringProp>
                            <stringProp name="Argument.value">${token_search_img_name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="oway" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">oway</stringProp>
                            <stringProp name="Argument.value">8</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="zhs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">zhs</stringProp>
                            <stringProp name="Argument.value">${zhs_value}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Upload" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Upload</stringProp>
                            <stringProp name="Argument.value">Submit Query</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pic/upload_token_search_img/0</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">token_search</stringProp>
                        <stringProp name="RegexExtractor.regex">.*path&quot;:&quot;(.+?)\\(.+?)\\(.+?)\\(.+?)\\(.+?)&quot;,&quot;pid&quot;:(.+?),&quot;url.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$$6$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="TestPlan.comments">&quot;path&quot;:&quot;goodsinfo\/2018\/01\/08\/1058556743.jpg&quot;,&quot;pid&quot;:1469,&quot;</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="433 /goods/check_taotoken" enabled="true"/>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="434 /goods/check_taotoken" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="taotoken_str" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">taotoken_str</stringProp>
                              <stringProp name="Argument.value">￥bNBD0LQ77eF￥</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/goods/check_taotoken</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://seller.zhs.com/goods/post</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="Origin" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">http://seller.zhs.com</stringProp>
                            </elementProp>
                            <elementProp name="X-Requested-With" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="430 /goods/check_taotoken" enabled="true"/>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="431 /goods/check_taotoken" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="taotoken_str" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">taotoken_str</stringProp>
                              <stringProp name="Argument.value">￥bNBD0LQ77eF￥￥</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/goods/check_taotoken</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://seller.zhs.com/goods/post</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="Origin" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">http://seller.zhs.com</stringProp>
                            </elementProp>
                            <elementProp name="X-Requested-With" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发布信息" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_token_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_token_</stringProp>
                          <stringProp name="Argument.value">${token_value}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[section]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[section]</stringProp>
                          <stringProp name="Argument.value">${goods_section}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[order_way]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[order_way]</stringProp>
                          <stringProp name="Argument.value">${order_way}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[source]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[source]</stringProp>
                          <stringProp name="Argument.value">${goods_source}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods_source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods_source</stringProp>
                          <stringProp name="Argument.value">${goods_source}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[custom_source_name]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[custom_source_name]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[istaoke]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[istaoke]</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[order_url]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[order_url]</stringProp>
                          <stringProp name="Argument.value">${url_order}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[qr_post_way]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[qr_post_way]</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="qr_post_way" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">qr_post_way</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ordersPath[picCount]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">ordersPath[picCount]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="searchPath[${mobile_search_img_pid}][pid]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">searchPath[${mobile_search_img_pid}][pid]</stringProp>
                          <stringProp name="Argument.value">${mobile_search_img_pid}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="searchPath[${mobile_search_img_pid}][keyword]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">searchPath[${mobile_search_img_pid}][keyword]</stringProp>
                          <stringProp name="Argument.value">111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="searchPath[${mobile_search_img_pid}][keyword_cap]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">searchPath[${mobile_search_img_pid}][keyword_cap]</stringProp>
                          <stringProp name="Argument.value">2222</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[taotoken]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[taotoken]</stringProp>
                          <stringProp name="Argument.value">￥bNBD0LQ77eF￥</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[title]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">goods[title]</stringProp>
                          <stringProp name="Argument.value">自动发布${section_title}${way_order}${goodsource_name}来源${title_No}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[keyword]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[keyword]</stringProp>
                          <stringProp name="Argument.value">我是关键词</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[shop_name]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[shop_name]</stringProp>
                          <stringProp name="Argument.value">111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[wangwang]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[wangwang]</stringProp>
                          <stringProp name="Argument.value">232123</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[shop_name_mobile_sear]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[shop_name_mobile_sear]</stringProp>
                          <stringProp name="Argument.value">111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[pid]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[pid]</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[cid]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[cid]</stringProp>
                          <stringProp name="Argument.value">10</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[imgCount]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[imgCount]</stringProp>
                          <stringProp name="Argument.value">3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[imgs][1]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[imgs][1]</stringProp>
                          <stringProp name="Argument.value">${pic1_url_g1}${pic1_url_g2}${pic1_url_g3}${pic1_url_g4}${pic1_url_g5}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[imgs][2]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[imgs][2]</stringProp>
                          <stringProp name="Argument.value">${pic2_url_g1}${pic2_url_g2}${pic2_url_g3}${pic2_url_g4}${pic2_url_g5}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[imgs][3]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[imgs][3]</stringProp>
                          <stringProp name="Argument.value">${pic3_url_g1}${pic3_url_g2}${pic3_url_g3}${pic3_url_g4}${pic3_url_g5}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[price]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[price]</stringProp>
                          <stringProp name="Argument.value">11</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[discount]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[discount]</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[mobile_price]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[mobile_price]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[num]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[num]</stringProp>
                          <stringProp name="Argument.value">11</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[days]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[days]</stringProp>
                          <stringProp name="Argument.value">11</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[buy_limit]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[buy_limit]</stringProp>
                          <stringProp name="Argument.value">3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[is_verify]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[is_verify]</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[prompts][2]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[prompts][2]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[prompts][6]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[prompts][6]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[prompts][9]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[prompts][9]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[prompts][4]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[prompts][4]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[instruction]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[instruction]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[message]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">goods[message]</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="postSubmit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">postSubmit</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="submitActivity" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">submitActivity</stringProp>
                          <stringProp name="Argument.value">发布商品</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="goods[scan_qr_way]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">goods[scan_qr_way]</stringProp>
                        </elementProp>
                        <elementProp name="scan_qr_way" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">scan_qr_way</stringProp>
                        </elementProp>
                        <elementProp name="goods[sm_sketch_pid]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${qrcode_search_g6}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">goods[sm_sketch_pid]</stringProp>
                        </elementProp>
                        <elementProp name="goods[price_type]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">goods[price_type]</stringProp>
                        </elementProp>
                        <elementProp name="pid[]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${qrcode_search_g6}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pid[]</stringProp>
                        </elementProp>
                        <elementProp name="goods[qrcode_searchway][${qrurl_to_qrimg_g6}]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">goods[qrcode_searchway][${qrurl_to_qrimg_g6}]</stringProp>
                        </elementProp>
                        <elementProp name="ordersPath[imgs]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${token_search_g1}${token_search_g2}${token_search_g3}${token_search_g4}${token_search_g5}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">ordersPath[imgs]</stringProp>
                        </elementProp>
                        <elementProp name="goods[kl_sketch_pid]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${token_search_g6}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">goods[kl_sketch_pid]</stringProp>
                        </elementProp>
                        <elementProp name="goods[tokens][]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">￥bNBD0LQ77eF￥ </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">goods[tokens][]</stringProp>
                        </elementProp>
                        <elementProp name="goods[token_searchway][]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">11111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">goods[token_searchway][]</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/goods/post</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">new_gid</stringProp>
                      <stringProp name="RegexExtractor.regex">.*pay/detail/(.+?)/.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="支付" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="请求付款页" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">seller.${web_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/pay/detail/${new_gid}/0-1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_uid" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">uid</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;uid&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_guaranteetitle" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">guaranteetitle</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;guaranteetitle&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_servicetitle" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">servicetitle</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;servicetitle&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_discounttitle" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">discounttitle</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;discounttitle&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_guaranteeOrder" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">guaranteeOrder</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;guaranteeOrder&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_serviceOrder" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">serviceOrder</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;serviceOrder&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_discountOrder" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">discountOrder</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;discountOrder&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_guaranteeMoney" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">guaranteeMoney</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;guaranteeMoney&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_serviceMoney" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">serviceMoney</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;serviceMoney&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_discountMoney" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">discountMoney</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;discountMoney&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_key" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">key</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;key&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_backurl" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">backurl</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;backurl&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_notifyurl" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">notifyurl</stringProp>
                        <stringProp name="RegexExtractor.regex">.*value=&quot;(.+?)&quot; name=&quot;notifyurl&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="校验登录状态" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="site" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">site</stringProp>
                            <stringProp name="Argument.value">3</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="uid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">uid</stringProp>
                            <stringProp name="Argument.value">${uid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">6</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="gid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">gid</stringProp>
                            <stringProp name="Argument.value">${new_gid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="guaranteetitle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">guaranteetitle</stringProp>
                            <stringProp name="Argument.value">${guaranteetitle}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="servicetitle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">servicetitle</stringProp>
                            <stringProp name="Argument.value">${servicetitle}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="discounttitle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">discounttitle</stringProp>
                            <stringProp name="Argument.value">${discounttitle}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="guaranteeOrder" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">guaranteeOrder</stringProp>
                            <stringProp name="Argument.value">${guaranteeOrder}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="serviceOrder" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">serviceOrder</stringProp>
                            <stringProp name="Argument.value">${serviceOrder}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="discountOrder" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">discountOrder</stringProp>
                            <stringProp name="Argument.value">${discountOrder}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="guaranteeMoney" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">guaranteeMoney</stringProp>
                            <stringProp name="Argument.value">${guaranteeMoney}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="serviceMoney" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">serviceMoney</stringProp>
                            <stringProp name="Argument.value">${serviceMoney}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="discountMoney" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">discountMoney</stringProp>
                            <stringProp name="Argument.value">${discountMoney}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="key" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">key</stringProp>
                            <stringProp name="Argument.value">${key}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="backurl" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">backurl</stringProp>
                            <stringProp name="Argument.value">${backurl}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="notifyurl" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">notifyurl</stringProp>
                            <stringProp name="Argument.value">${notifyurl}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="temp1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">temp1</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="temp2" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">temp2</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="temp3" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">temp3</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">www.${pay_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/trade/checklogin</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_sign" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">sign</stringProp>
                        <stringProp name="RegexExtractor.regex">.*name=&quot;sign&quot; value=&quot;(.+?)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_post_data" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">post_data</stringProp>
                        <stringProp name="RegexExtractor.regex">.*name=&quot;postdata&quot; value=&quot;(.+?)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="确认支付" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="password" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">password</stringProp>
                            <stringProp name="Argument.value">zhs321</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="sign" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">sign</stringProp>
                            <stringProp name="Argument.value">${sign}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">www.${pay_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                      <stringProp name="HTTPSampler.path">/trade/CheckPassword</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_pay_sign" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">pay_sign</stringProp>
                        <stringProp name="RegexExtractor.regex">.*val\(\&apos;(.+?)\&apos;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="支付结果" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="site" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">site</stringProp>
                            <stringProp name="Argument.value">3</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="uid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">uid</stringProp>
                            <stringProp name="Argument.value">${uid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">6</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="gid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">gid</stringProp>
                            <stringProp name="Argument.value">${new_gid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="guaranteetitle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">guaranteetitle</stringProp>
                            <stringProp name="Argument.value">${guaranteetitle}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="servicetitle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">servicetitle</stringProp>
                            <stringProp name="Argument.value">${servicetitle}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="discounttitle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">discounttitle</stringProp>
                            <stringProp name="Argument.value">${discounttitle}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="guaranteeOrder" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">guaranteeOrder</stringProp>
                            <stringProp name="Argument.value">${guaranteeOrder}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="serviceOrder" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">serviceOrder</stringProp>
                            <stringProp name="Argument.value">${serviceOrder}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="discountOrder" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">discountOrder</stringProp>
                            <stringProp name="Argument.value">${discountOrder}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="guaranteeMoney" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">guaranteeMoney</stringProp>
                            <stringProp name="Argument.value">${guaranteeMoney}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="serviceMoney" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">serviceMoney</stringProp>
                            <stringProp name="Argument.value">${serviceMoney}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="discountMoney" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">discountMoney</stringProp>
                            <stringProp name="Argument.value">${discountMoney}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="key" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">key</stringProp>
                            <stringProp name="Argument.value">${key}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="backurl" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">backurl</stringProp>
                            <stringProp name="Argument.value">${backurl}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="notifyurl" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">notifyurl</stringProp>
                            <stringProp name="Argument.value">${notifyurl}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="temp1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">temp1</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="temp2" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">temp2</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="temp3" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">temp3</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="paysign" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">paysign</stringProp>
                            <stringProp name="Argument.value">${pay_sign}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">www.${pay_url}.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/trade/PayResult</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">http://www.shikeehlpay.com/trade/paymentGoods</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">zh-CN</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                          <elementProp name="DNT" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html, application/xhtml+xml, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="管理员审核活动" enabled="true"/>
                  <hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="管理员登陆" enabled="true"/>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="管理员登录" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="errorMsg" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">errorMsg</stringProp>
                            </elementProp>
                            <elementProp name="account" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">管理员</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">account</stringProp>
                            </elementProp>
                            <elementProp name="token" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${token_value}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">token</stringProp>
                            </elementProp>
                            <elementProp name="to" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">http%3A%2F%2Fwww.${web_url}.com%2F</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">to</stringProp>
                            </elementProp>
                            <elementProp name="password" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">zhs123</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">password</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">login.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/tologin</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录成功" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="to" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">to</stringProp>
                              <stringProp name="Argument.value">http%3A%2F%2Fadmin.${web_url}.com%2F</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">login.${web_url}.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/success</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器_admin_sign" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">admin_sign</stringProp>
                          <stringProp name="RegexExtractor.regex">.*1&amp;sign=(.+?)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="审核通过" enabled="true"/>
                    <hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="等于58分" enabled="true">
                        <stringProp name="IfController.condition">${__time(mm,)}==58</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新活动审核通过" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="startTime" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">startTime</stringProp>
                                <stringProp name="Argument.value">2017-11-16 18:36:54</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="endTimetype" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">endTimetype</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="endTime" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">endTime</stringProp>
                                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)} ${__time(${__intSum(${__time(HH,)},+1,)}:,)}${__intSum(${__time(mm,)},+2,)}${__time(:ss,)}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="dosave" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">dosave</stringProp>
                                <stringProp name="Argument.value">yes</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="pass" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">pass</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="gid" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">gid</stringProp>
                                <stringProp name="Argument.value">${new_gid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">admin.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/goods/check</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="789079806">操作成功</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="等于59分" enabled="true">
                        <stringProp name="IfController.condition">${__time(mm,)}==59</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新活动审核通过" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="startTime" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">startTime</stringProp>
                                <stringProp name="Argument.value">2017-11-16 18:36:54</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="endTimetype" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">endTimetype</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="endTime" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">endTime</stringProp>
                                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)} ${__time(${__intSum(${__time(HH,)},+1,)}:,)}${__intSum(${__time(mm,)},+1,)}${__time(:ss,)}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="dosave" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">dosave</stringProp>
                                <stringProp name="Argument.value">yes</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="pass" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">pass</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="gid" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">gid</stringProp>
                                <stringProp name="Argument.value">${new_gid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">admin.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/goods/check</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="789079806">操作成功</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="不等于58和59" enabled="true">
                        <stringProp name="IfController.condition">${__time(mm,)}!=59 &amp;&amp; ${__time(mm,)}!=58</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新活动审核通过" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="startTime" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">startTime</stringProp>
                                <stringProp name="Argument.value">2017-11-16 18:36:54</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="endTimetype" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">endTimetype</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="endTime" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">endTime</stringProp>
                                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)} ${__time(HH:,)}${__intSum(${__time(mm,)},+2,)}${__time(:ss,)}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="dosave" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">dosave</stringProp>
                                <stringProp name="Argument.value">yes</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="pass" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">pass</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="gid" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">gid</stringProp>
                                <stringProp name="Argument.value">${new_gid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">admin.${web_url}.com</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/goods/check</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="789079806">操作成功</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="109619693">somea</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1446085987">
                <stringProp name="-942466541">${run_dev}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="2.买家流程" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1516928545000</longProp>
        <longProp name="ThreadGroup.end_time">1516928545000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.1 买家抢购流程_卢建庆" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="配置文件" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Name_1" elementType="Argument">
                <stringProp name="Argument.name">Name_1</stringProp>
                <stringProp name="Argument.value">bb</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">抢购用户名</stringProp>
              </elementProp>
              <elementProp name="Domain" elementType="Argument">
                <stringProp name="Argument.name">Domain</stringProp>
                <stringProp name="Argument.value">zhs</stringProp>
                <stringProp name="Argument.desc">服务器域名</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="活动编号" enabled="false">
            <stringProp name="filename">C:\Users\Administrator\Desktop\活动编号.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">gid</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="cookies" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="get_shop_info" enabled="false">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery"></stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">get_shop_info</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://192.168.0.240/mall</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">111111</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">root</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="get_order_info" enabled="false">
            <stringProp name="dataSource">get_order_info</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery"></stringProp>
            <stringProp name="dbUrl">jdbc:mysql://192.168.0.240/mall</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">root</stringProp>
            <stringProp name="password">111111</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="一、仅抢购活动(按以下注释操作)" enabled="true">
            <stringProp name="ForeachController.inputVal">Name</stringProp>
            <stringProp name="ForeachController.returnVal">Vname</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="TestPlan.comments">使用说明：
1、在【配置文件】中按用户名格式添加抢购的用户，修改服务器域名；
2、在对应数据库中【shs_user_stat】表，将抢购用户的【goods_today_buy_num】修改为1000；
3、将抢购的活动编号填入配置文件目录下的【活动编号.txt】内，一行一个活动编号；
4、修改【买家】线程组中的循环次数和线程数；
注意：
买家账号数=线程数
循环次数=活动编号个数</stringProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} User_Login" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="account" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${Vname}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">account</stringProp>
                  </elementProp>
                  <elementProp name="errorMsg" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">errorMsg</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">zhs123</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="to" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">http%3A%2F%2Fwww.${Domain}.com%2F</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">to</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">76f047b65f6e5547cbc63930b6466ae8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">token</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">login.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">list.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">gid</stringProp>
                <stringProp name="RegexExtractor.regex">.*href=&quot;http://detail.zhs.com/(.+?).html.*</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} Open_Detail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">detail.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${gid}.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器(get_sign)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">get_sign</stringProp>
                <stringProp name="RegexExtractor.regex">sign=(.*)&amp;t=</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器(get_time)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">get_time</stringProp>
                <stringProp name="RegexExtractor.regex">&amp;t=(.*)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} Get_Activity_info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sign" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${get_sign}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sign</stringProp>
                  </elementProp>
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${get_time}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">detail.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/data/${gid}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器(get_type)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">get_type</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;,&quot;type&quot;:&quot;(.*)&quot;,&quot;first_days</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器(get_remain_quantity)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">get_remain_quantity</stringProp>
                <stringProp name="RegexExtractor.regex">quantity&quot;:&quot;30&quot;,&quot;remain_quantity&quot;:&quot;(.*)&quot;,&quot;join_num</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Get_remain_quantity" enabled="true">
              <stringProp name="IfController.condition">!&quot;${get_remain_quantity}&quot;==&quot;0&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} Rush" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="zperiod" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">zperiod</stringProp>
                    </elementProp>
                    <elementProp name="t" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${get_time}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">t</stringProp>
                    </elementProp>
                    <elementProp name="sign" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${get_sign}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sign</stringProp>
                    </elementProp>
                    <elementProp name="gid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${gid}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">gid</stringProp>
                    </elementProp>
                    <elementProp name="callback" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_jqjsp</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">callback</stringProp>
                    </elementProp>
                    <elementProp name="_1516614900545" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_1516614900545</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">trade.${Domain}.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">3000</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="仅抢购活动运行报告" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="二、用户抢购并填写单号(按以下注释操作)" enabled="false">
            <stringProp name="ForeachController.inputVal">Name</stringProp>
            <stringProp name="ForeachController.returnVal">Vname</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="TestPlan.comments">使用说明：
1、在【配置文件】中按用户名格式添加抢购的用户，修改服务器域名；
2、在对应数据库中【shs_user_stat】表，将抢购用户的【goods_today_buy_num】修改为1000；
3、将抢购的活动编号填入配置文件目录下的【活动编号.txt】内，一行一个活动编号；
4、修改【买家】线程组中的循环次数和线程数；
注意：
买家账号数=线程数
循环次数=活动编号个数
5、修改【get_shop_info】和【get_order_info】为对应的数据库IP。</stringProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} User_Login" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="account" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${Vname}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">account</stringProp>
                  </elementProp>
                  <elementProp name="errorMsg" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">errorMsg</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">zhs123</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="to" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">http%3A%2F%2Fwww.${Domain}.com%2F</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">to</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">76f047b65f6e5547cbc63930b6466ae8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">token</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">login.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} Open_Detail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">detail.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${gid}.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器(get_sign)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">get_sign</stringProp>
                <stringProp name="RegexExtractor.regex">sign=(.*)&amp;t=</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器(get_time)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">get_time</stringProp>
                <stringProp name="RegexExtractor.regex">&amp;t=(.*)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} Get_Activity_info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sign" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${get_sign}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sign</stringProp>
                  </elementProp>
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${get_time}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">detail.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/data/${gid}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器(get_type)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">get_type</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;,&quot;type&quot;:&quot;(.*)&quot;,&quot;first_days</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器(get_remain_quantity)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">get_remain_quantity</stringProp>
                <stringProp name="RegexExtractor.regex">quantity&quot;:&quot;30&quot;,&quot;remain_quantity&quot;:&quot;(.*)&quot;,&quot;join_num</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Get_remain_quantity" enabled="true">
              <stringProp name="IfController.condition">!&quot;${get_remain_quantity}&quot;==&quot;0&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} Rush" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="zperiod" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">zperiod</stringProp>
                    </elementProp>
                    <elementProp name="t" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${get_time}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">t</stringProp>
                    </elementProp>
                    <elementProp name="sign" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${get_sign}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sign</stringProp>
                    </elementProp>
                    <elementProp name="gid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${gid}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">gid</stringProp>
                    </elementProp>
                    <elementProp name="callback" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_jqjsp</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">callback</stringProp>
                    </elementProp>
                    <elementProp name="_1516614900545" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_1516614900545</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">trade.${Domain}.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">3000</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="用户抢购并填写单号运行报告" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Order" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get_shop_info" enabled="true">
              <stringProp name="dataSource">get_shop_info</stringProp>
              <stringProp name="query">select * from shs_goods_content where gid=&quot;${gid}&quot;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
              <stringProp name="resultVariable">shop_result</stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor(get_shop_url)" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
public void test(){
db_url=vars.getObject(&quot;shop_result&quot;).get(0).get(&quot;url&quot;);
vars.put(&quot;shop_url&quot;,db_url);
//log.info(db_url);
log.info(&quot;查询店铺链接为：&quot;+vars.get(&quot;shop_url&quot;));
	}
test();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor(get_shop_name)" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">public String test(){
db_name=vars.getObject(&quot;shop_result&quot;).get(0).get(&quot;shopname&quot;);
vars.put(&quot;shop_name&quot;,db_name.toString());
//log.info(db_name);
log.info(&quot;查询店铺名为：&quot;+vars.get(&quot;shop_name&quot;));
return db_name;
	}
test();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="get_order_info" enabled="true">
              <stringProp name="dataSource">get_order_info</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select * from shs_order where buyer_uname=&quot;${Vname}&quot; and gid=&quot;${gid}&quot;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">order_result</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor(get_oid)" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">public String test(){
db_oid=vars.getObject(&quot;order_result&quot;).get(0).get(&quot;oid&quot;);
vars.put(&quot;order_oid&quot;,db_oid.toString());
//log.info(db_oid.toString());
log.info(&quot;查询订单活动编号为：&quot;+vars.get(&quot;order_oid&quot;));
return db_oid.toString();
	}
test();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activity_Type" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1（电脑搜索）活动" enabled="true">
                <stringProp name="IfController.condition">&quot;${get_type}&quot;==&quot;3&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="核对商品链接" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="gid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${gid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">gid</stringProp>
                      </elementProp>
                      <elementProp name="url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${shop_url}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">url</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/check_goods_url</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} 填写单号" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="trade_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${order}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">trade_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/save_no/${gid}/${order_oid}?trade_no=${order}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor(generate_order)" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String random_order= &quot;${__Random(20,999,)}&quot;;
String time_order=&quot;${__time(,)}&quot;;
vars.put(&quot;order&quot;,random_order+time_order);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2（手机搜索）活动" enabled="true">
                <stringProp name="IfController.condition">&quot;${get_type}&quot;==&quot;20&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="核对店铺信息" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="gid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${gid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">gid</stringProp>
                      </elementProp>
                      <elementProp name="check_content" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${shop_name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">check_content</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/check_goods_mobile_search</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} 填写单号" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="trade_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${order}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">trade_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.zhsmain.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/save_no/${gid}/${order_oid}?trade_no=${order}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor(generate_order)" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String random_order= &quot;${__Random(20,999,)}&quot;;
String time_order=&quot;${__time(,)}&quot;;
vars.put(&quot;order&quot;,random_order+time_order);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="3（扫码搜索）活动" enabled="true">
                <stringProp name="IfController.condition">&quot;${get_type}&quot;==&quot;25&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="核对店铺信息" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="gid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${gid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">gid</stringProp>
                      </elementProp>
                      <elementProp name="check_content" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${shop_name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">check_content</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/check_goods_mobile_search</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} 填写单号" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="trade_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${order}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">trade_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/save_no/${gid}/${order_oid}?trade_no=${order}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor(generate_order)" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String random_order= &quot;${__Random(20,999,)}&quot;;
String time_order=&quot;${__time(,)}&quot;;
vars.put(&quot;${order}&quot;,random_order+time_order);
String result_order = vars.get(&quot;${order}&quot;);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="4（口令搜索）活动" enabled="true">
                <stringProp name="IfController.condition">&quot;${get_type}&quot;==&quot;26&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="核对店铺信息" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="gid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${gid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">gid</stringProp>
                      </elementProp>
                      <elementProp name="check_content" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${shop_name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">check_content</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/check_goods_mobile_search</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} 填写单号" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="trade_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${order}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">trade_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/save_no/${gid}/${order_oid}?trade_no=${order}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor(generate_order)" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String random_order= &quot;${__Random(20,999,)}&quot;;
String time_order=&quot;${__time(,)}&quot;;
vars.put(&quot;order&quot;,random_order+time_order);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="5（直链下单）活动" enabled="true">
                <stringProp name="IfController.condition">&quot;${get_type}&quot;==&quot;0&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} 填写单号" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="trade_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${order}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">trade_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/save_no/${gid}/${order_oid}?trade_no=${order}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor(generate_order)" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String random_order= &quot;${__Random(20,999,)}&quot;;
String time_order=&quot;${__time(,)}&quot;;
vars.put(&quot;order&quot;,random_order+time_order);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="6（扫码下单）活动" enabled="true">
                <stringProp name="IfController.condition">&quot;${get_type}&quot;==&quot;7&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} 填写单号" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="trade_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${order}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">trade_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/save_no/${gid}/${order_oid}?trade_no=${order}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor(generate_order)" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String random_order= &quot;${__Random(20,999,)}&quot;;
String time_order=&quot;${__time(,)}&quot;;
vars.put(&quot;order&quot;,random_order+time_order);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="7（口令下单）活动" enabled="true">
                <stringProp name="IfController.condition">&quot;${get_type}&quot;==&quot;8&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Vname} 填写单号" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="trade_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${order}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">trade_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">buyer.${Domain}.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/order/save_no/${gid}/${order_oid}?trade_no=${order}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor(generate_order)" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String random_order= &quot;${__Random(20,999,)}&quot;;
String time_order=&quot;${__time(,)}&quot;;
vars.put(&quot;order&quot;,random_order+time_order);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="买家登录进入我的订单" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="买家登录" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="account" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">aa</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account</stringProp>
                </elementProp>
                <elementProp name="errorMsg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">errorMsg</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">zhs123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="to" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">http%3A%2F%2Fwww.zhs.com%2F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">to</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">76f047b65f6e5547cbc63930b6466ae8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">login.zhs.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tologin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP请求" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="stime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">d</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">stime</stringProp>
                </elementProp>
                <elementProp name="etime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">d</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">etime</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">buyer.zhs.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/order/?stime=d&amp;etime=d</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1500657976">&lt;label for=&quot;&quot;&gt;抢购时间&lt;/label&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HTMLAssertion guiclass="HTMLAssertionGui" testclass="HTMLAssertion" testname="HTML Assertion" enabled="false">
              <longProp name="html_assertion_error_threshold">0</longProp>
              <longProp name="html_assertion_warning_threshold">0</longProp>
              <stringProp name="html_assertion_doctype">omit</stringProp>
              <boolProp name="html_assertion_errorsonly">false</boolProp>
              <longProp name="html_assertion_format">0</longProp>
              <stringProp name="html_assertion_filename"></stringProp>
            </HTMLAssertion>
            <hashTree/>
          </hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="3.管理员流程" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3.1 屏蔽商家_韦阜山" enabled="true"/>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="VIEWSTATE" elementType="Argument">
                <stringProp name="Argument.name">VIEWSTATE</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jsessionid" elementType="Argument">
                <stringProp name="Argument.name">jsessionid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; Trident/7.0; rv:11.0) like Gecko</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, application/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">zh-Hans-CN,zh-Hans;q=0.5</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
            <boolProp name="clearEachIteration">false</boolProp>
            <boolProp name="useExpires">false</boolProp>
          </CacheManager>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">admin.zhsdev2.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="配置文件" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Name_1" elementType="Argument">
                <stringProp name="Argument.name">Name_1</stringProp>
                <stringProp name="Argument.value">bb</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">抢购用户名</stringProp>
              </elementProp>
              <elementProp name="Domain" elementType="Argument">
                <stringProp name="Argument.name">Domain</stringProp>
                <stringProp name="Argument.value">zhs</stringProp>
                <stringProp name="Argument.desc">服务器域名</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Step 1" enabled="true">
            <boolProp name="LoopController.continue_forever">false</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="管理员页" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">admin.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录页" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="to" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">http://admin.zhsdev2.com/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">to</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">login.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/?to=http://admin.${Domain}.com/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="管理员登录" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="account" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">管理员</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">account</stringProp>
                  </elementProp>
                  <elementProp name="errorMsg" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">errorMsg</stringProp>
                  </elementProp>
                  <elementProp name="to" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">http%3A%2F%2Fadmin.${Domain}.com%2F</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">to</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">token</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">zhs123</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">login.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tologin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">token:(.+?)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录成功" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="to" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">http://admin.${Domain}.com/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">to</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">login.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/success?to=http://admin.${Domain}.com/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="管理员首页" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">admin.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="会员管理——商家" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">admin.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/user/index/seller</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="屏蔽商家" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="uids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">119</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">uids</stringProp>
                  </elementProp>
                  <elementProp name="utype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">utype</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">admin.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/user/lock</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">D:\Badboy_file\uid.txt</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">uid</stringProp>
              </CSVDataSet>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="屏蔽商家理由" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="content" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">test007</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">content</stringProp>
                  </elementProp>
                  <elementProp name="state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">state</stringProp>
                  </elementProp>
                  <elementProp name="day" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">7</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">day</stringProp>
                  </elementProp>
                  <elementProp name="is_post" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">yes</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_post</stringProp>
                  </elementProp>
                  <elementProp name="uids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">119</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">uids</stringProp>
                  </elementProp>
                  <elementProp name="utype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">utype</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">admin.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/user/lock</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="会员管理——商家" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">admin.${Domain}.com</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/user/index/seller</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="4.自动发布自营活动" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1516694684000</longProp>
        <longProp name="ThreadGroup.end_time">1516694684000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="计数器" enabled="true">
            <stringProp name="CounterConfig.start">${i}</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">title_No</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_商家" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="errorMsg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">errorMsg</stringProp>
                </elementProp>
                <elementProp name="account" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">安踏</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">fadcb9cb424a678b16d51aecbb12dc2b</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
                <elementProp name="to" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">http%3A%2F%2Fwww.${web_url}.com%2F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">to</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">zhs123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">login.zhsdev1.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tologin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5 /" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">mallseller.zhsdev1.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11 /goods/add" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">mallseller.zhsdev1.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/goods/add</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://mallseller.zhsdev1.com/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="25 /goods/upload_more" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="25 /goods/upload_more" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\Users\Administrator\Desktop\pic\c2.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\Users\Administrator\Desktop\pic\c2.jpg</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">uid</stringProp>
                    <stringProp name="Argument.value">123</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                    <stringProp name="Argument.value">WU_FILE_0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">c2.jpg</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                    <stringProp name="Argument.value">image/jpeg</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="lastModifiedDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">lastModifiedDate</stringProp>
                    <stringProp name="Argument.value">Thu Mar 19 2015 09:22:34 GMT+0800 (中国标准时间)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="size" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">size</stringProp>
                    <stringProp name="Argument.value">34726</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">mallseller.zhsdev1.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/goods/upload_more</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://mallseller.zhsdev1.com/goods/add</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://mallseller.zhsdev1.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="26 /common/js/webuploader/success.png" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">mallstatic.zhsdev1.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/common/js/webuploader/success.png</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://mallstatic.zhsdev1.com/common/js/webuploader/webuploader.css?v=SYS_VERSIONSYS_BUILD</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">image/webp,image/*,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="27 /goods/add" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cate_id[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cate_id[]</stringProp>
                  <stringProp name="Argument.value">7485</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cate_id[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cate_id[]</stringProp>
                  <stringProp name="Argument.value">7495</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="store_cate_id[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">store_cate_id[]</stringProp>
                  <stringProp name="Argument.value">7716</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="store_cate_id[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">store_cate_id[]</stringProp>
                  <stringProp name="Argument.value">7717</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="file" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">file</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="uploadimg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">uploadimg</stringProp>
                  <stringProp name="Argument.value">goods/2018/01/23/201801231616048010.jpg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="goods_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">goods_name</stringProp>
                  <stringProp name="Argument.value">自动发布自营活动${title_No}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spec_n[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">spec_n[]</stringProp>
                  <stringProp name="Argument.value">规格1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spec_v_0[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">spec_v_0[]</stringProp>
                  <stringProp name="Argument.value">属性1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cost_price[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cost_price[]</stringProp>
                  <stringProp name="Argument.value">100.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="price[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">price[]</stringProp>
                  <stringProp name="Argument.value">10.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="stock[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">stock[]</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sku[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sku[]</stringProp>
                  <stringProp name="Argument.value">123321</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="recommended" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">recommended</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="attributes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">attributes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="detail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">detail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">mallseller.zhsdev1.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/goods/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://mallseller.zhsdev1.com/goods/add</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://mallseller.zhsdev1.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28 /goods/index" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">mallseller.zhsdev1.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/goods/index</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments"> &lt;a href=&quot;http://mall.zhsdev1.com/item-4364.html&quot; target=&quot;_blank&quot;&gt;       //gid
</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://mallseller.zhsdev1.com/goods/add</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">gid</stringProp>
              <stringProp name="RegexExtractor.regex">.* &lt;a href=&quot;http://mall.zhsdev1.com/item-(.+?).html&quot; .*</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> &lt;a href=&quot;http://mall.zhsdev1.com/item-4364.html&quot; target=&quot;_blank&quot;&gt;       //gid</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="39 /goods/up_goods" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goods_id[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">goods_id[]</stringProp>
                  <stringProp name="Argument.value">${gid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="if_show" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">if_show</stringProp>
                  <stringProp name="Argument.value"> 1 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">mallseller.zhsdev1.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/goods/up_goods</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">{&quot;success&quot;:true,&quot;data&quot;:&quot;\u4e0a\u67b6\u6210\u529f&quot;}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://mallseller.zhsdev1.com/goods/index</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">zh-CN,zh;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://mallseller.zhsdev1.com</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="仅一次控制器_转盘" enabled="false"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="转盘" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="qrcode_token_key" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">290aa208cf669ab0ac911f4ac2d04634</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">qrcode_token_key</stringProp>
              </elementProp>
              <elementProp name="zhs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">%E9%A3%9E%E5%A4%A9%E9%B1%BF%E9%B1%BC%7C1%7COcjZa29d378c9fg3rBcnMI37kczw9g%3D%3D%7C1%7C0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">zhs</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">special.zhsdev1.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/shuang11_2017/lottery_draw/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">point</stringProp>
            <stringProp name="RegexExtractor.regex">.*&quot;point&quot;:(.+?).*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">null</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
          <stringProp name="IfController.condition">${point}!=0</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">/*vars.put(&quot;dianshu&quot;,bsh.args[0]);
vars.put(&quot;cishu&quot;,0);
bijiao=vars.get(&quot;dianshu&quot;);
if (bijiao==8)
{
	vars.put(&quot;ci&quot;,cishu+1);
}
return vars.get(&quot;ci&quot;);*/
//name= vars.get(&quot;username&quot;);
vars.put(&quot;c_name&quot;,bsh.args[1]);
name=vars.get(&quot;c_name&quot;);
public static test()
{
	int n1=0,n2=0,n3=0,n4=0,n5=0,n6=0,n7=0,n8=0;
	vars.put(&quot;point&quot;,bsh.args[0]);
	dianshu=vars.get(&quot;point&quot;);
	if (Integer.parseInt(vars.get(&quot;point&quot;))==0) //Integer.parseInt(&quot;123&quot;)=Integer.parseInt(&quot;123&quot;,10)，默认十进制， 转换类型
	{
		return name+&quot;0没有抽奖次数&quot;;
			
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==1)
	{
		n1+=1;
		return name+&quot;抽中1小米蓝牙音箱&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==2)
	{
		n2+=1;
		return name+&quot;抽中2现金券10元A&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==3)
	{
		n3+=1;
		return name+&quot;抽中3小米充电宝&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==4)
	{
		n4+=1;
		return name+&quot;抽中4感谢参与&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==5)
	{
		n5+=1;
		return name+&quot;抽中5-50元话费&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==6)
	{
		n6+=1;
		return name+&quot;抽中6现金券10元B&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==7)
	{
		n7+=1;
		return name+&quot;抽中7格瓦拉电影票（一张）&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==8)
	{
		n8+=1;
		return name+&quot;抽中8感谢参与&quot;;
	}

	
}

//test();

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
  
//String dianshu= vars.get(&quot;point&quot;);
String dianshu= test();
try{
File file = new File(&quot;C:\\Users\\Administrator\\Desktop\\res.csv&quot;);
if (!file.exists())
{ 
file.createNewFile();
}  
BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(new FileInputStream(file.getAbsolutePath()), &quot;UTF-8&quot;));
String str=&quot;&quot;;
boolean isExist=false; 
if (!isExist)
{
FileOutputStream fos = new FileOutputStream(file.getAbsoluteFile(),true);//true表示在文件末尾追加  
       fos.write(dianshu.getBytes());  
       fos.write(&quot;\r\n&quot;.getBytes());  
       fos.close();
}
}
catch(IOException e)
{
e.printStackTrace();
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters">${point} ${COOKIE_account}</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器_转盘" enabled="false">
        <stringProp name="IfController.condition">${point}==4||${point}==8</stringProp>
        <boolProp name="IfController.evaluateAll">false</boolProp>
      </IfController>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="转盘" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="qrcode_token_key" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">290aa208cf669ab0ac911f4ac2d04634</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">qrcode_token_key</stringProp>
              </elementProp>
              <elementProp name="zhs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">%E9%A3%9E%E5%A4%A9%E9%B1%BF%E9%B1%BC%7C1%7COcjZa29d378c9fg3rBcnMI37kczw9g%3D%3D%7C1%7C0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">zhs</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">special.zhsdev1.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/shuang11_2017/lottery_draw/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">point</stringProp>
            <stringProp name="RegexExtractor.regex">.*&quot;point&quot;:(.+?).*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">null</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
          <stringProp name="IfController.condition">${point}!=0</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">/*vars.put(&quot;dianshu&quot;,bsh.args[0]);
vars.put(&quot;cishu&quot;,0);
bijiao=vars.get(&quot;dianshu&quot;);
if (bijiao==8)
{
	vars.put(&quot;ci&quot;,cishu+1);
}
return vars.get(&quot;ci&quot;);*/
//name= vars.get(&quot;username&quot;);
vars.put(&quot;c_name&quot;,bsh.args[1]);
name=vars.get(&quot;c_name&quot;);
public static test()
{
	int n1=0,n2=0,n3=0,n4=0,n5=0,n6=0,n7=0,n8=0;
	vars.put(&quot;point&quot;,bsh.args[0]);
	dianshu=vars.get(&quot;point&quot;);
	if (Integer.parseInt(vars.get(&quot;point&quot;))==0) //Integer.parseInt(&quot;123&quot;)=Integer.parseInt(&quot;123&quot;,10)，默认十进制， 转换类型
	{
		return name+&quot;0没有抽奖次数&quot;;
			
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==1)
	{
		n1+=1;
		return name+&quot;抽中1小米蓝牙音箱&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==2)
	{
		n2+=1;
		return name+&quot;抽中2现金券10元A&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==3)
	{
		n3+=1;
		return name+&quot;抽中3小米充电宝&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==4)
	{
		n4+=1;
		return name+&quot;抽中4感谢参与&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==5)
	{
		n5+=1;
		return name+&quot;抽中5-50元话费&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==6)
	{
		n6+=1;
		return name+&quot;抽中6现金券10元B&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==7)
	{
		n7+=1;
		return name+&quot;抽中7格瓦拉电影票（一张）&quot;;
	}else if(Integer.parseInt(vars.get(&quot;point&quot;))==8)
	{
		n8+=1;
		return name+&quot;抽中8感谢参与&quot;;
	}

	
}

//test();

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
  
//String dianshu= vars.get(&quot;point&quot;);
String dianshu= test();
try{
File file = new File(&quot;C:\\Users\\Administrator\\Desktop\\res.csv&quot;);
if (!file.exists())
{ 
file.createNewFile();
}  
BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(new FileInputStream(file.getAbsolutePath()), &quot;UTF-8&quot;));
String str=&quot;&quot;;
boolean isExist=false; 
if (!isExist)
{
FileOutputStream fos = new FileOutputStream(file.getAbsoluteFile(),true);//true表示在文件末尾追加  
       fos.write(dianshu.getBytes());  
       fos.write(&quot;\r\n&quot;.getBytes());  
       fos.close();
}
}
catch(IOException e)
{
e.printStackTrace();
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters">${point} ${COOKIE_account}</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
